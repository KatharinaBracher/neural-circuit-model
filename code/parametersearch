from onetwogo import Params
from onetwogo.experiment_simulation import ExperimentSimulation
from multiprocessing import Pool
# import pickle
import time
import numpy as np


def execute(d):
    stimulus_range, K, th, t, delay = d
    print("executing with", K, th, t, delay, "= K, th, t, delay")

    params = Params(ntrials=500, delay=delay, tau=t, th=th)
    expsim = ExperimentSimulation(params)
    stimulus_lst = expsim.generate_stimulus_lst(stimulus_range)
    # retunn BehavioralData def save to disk
    sim_result = expsim.simulate(stimulus_lst, K)  # TODO seed
    result = sim_result.create_behavioral_data()
    return (result, K)


# create seach space
def create_search_space(srange, K_lst, th_lst, tau, delay_lst):
    search_space = []

    if srange == 'short':
        stimulus_range = [400, 450, 500, 550, 600, 650, 700]
    if srange == 'long':
        stimulus_range = [700, 750, 800, 850, 900, 950, 1000]

    for K in K_lst:
        for th in th_lst:
            for t in tau:
                for delay in delay_lst:
                    search_space.append((stimulus_range, K, th, t, delay))
    return search_space


def run_parallel(batchsize, srange, K_lst, th_lst, tau, delay_lst, name):
    search_space = create_search_space(srange, K_lst, th_lst, tau, delay_lst)
    with open('/home/bracher/results/%s-%s-output.pickle' % (name, time.strftime("%Y%m%d-%H%M%S")), 'ab') as fp:
        for i in range(0, len(search_space), batchsize):
            print(i, i+batchsize, 'of', len(search_space))
            with Pool(8) as p:
                results = p.map(execute, search_space[i:i + batchsize])
                for result, K in results:
                    print('writing to disk as', name)
                    result.write_to_disk(fp, srange, K)


K_lst = np.arange(0.5, 10.5, 0.5)
th_lst = np.arange(0.6, 0.75, 0.01)
delay_lst = np.arange(400, 1000, 50)
tau = np.arange(60, 200, 10)

# choose parameter range #############################################################
srange = 'long'
# K_lst = [5.0]
th_lst = [0.7]
# tau = [100]
delay_lst = [700]

name = 'LONG_KTAU_th07del700'
# name = 'LONG_K5tau100th07del700'

# 2.5 MB per simulation result
run_parallel(8, srange, K_lst, th_lst, tau, delay_lst, name)
